{
	"name": "dataflow2",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Json2",
						"type": "DatasetReference"
					},
					"name": "source1",
					"description": "Import Pollution data from Json2"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Parquet1",
						"type": "DatasetReference"
					},
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "flatten2"
				},
				{
					"name": "derivedColumn3"
				},
				{
					"name": "filter2"
				},
				{
					"name": "derivedColumn4"
				},
				{
					"name": "select2"
				}
			],
			"scriptLines": [
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine') ~> source1",
				"source1 foldDown(unrollMultiple(list,list.weather),",
				"     mapColumn(",
				"          message,",
				"          cod,",
				"          city_id,",
				"          calctime,",
				"          cnt,",
				"          list",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flatten2",
				"flatten2 derive(cod = cod,",
				"          city_id = city_id,",
				"          cnt = cnt,",
				"          calctime = calctime,",
				"          timestamp = list.dt,",
				"          message = message,",
				"          clouds_all = list.clouds.all,",
				"          feels_like = list.main.feels_like,",
				"          humidity = list.main.humidity,",
				"          pressure = list.main.pressure,",
				"          temp = list.main.temp,",
				"          temp_max = list.main.temp_max,",
				"          temp_min = list.main.temp_min,",
				"          weather_description = list.weather.description,",
				"          weather_icon = list.weather.icon,",
				"          weather_id = list.weather.id,",
				"          weather_main = list.weather.main,",
				"          wind_deg = list.wind.deg,",
				"          wind_speed = list.wind.speed,",
				"          corrected_timestamp = iif(length(toString(list.dt)) > 10, toInteger(null()), list.dt),",
				"          location = 'Boston') ~> derivedColumn3",
				"derivedColumn3 filter(!or(",
				"    or(isNull(temp), isNull(humidity)),",
				"    or(isNull(timestamp), isNull(corrected_timestamp))",
				")) ~> filter2",
				"filter2 derive(date_time = toTimestamp(toLong(corrected_timestamp * 1000)),",
				"          id = concat(location, toString(corrected_timestamp)),",
				"          temp_C = round(temp - 273.15),",
				"          temp_min_C = round(temp_min- 273.15),",
				"          temp_max_C = round(temp_max- 273.15),",
				"          feels_like_C = round(feels_like - 273.15),",
				"          feels_like_F = round((feels_like - 273.15) * 9/5 + 32),",
				"          temp_min_F = round((temp_min - 273.15) * 9/5 + 32),",
				"          temp_max_F = round((temp_max - 273.15) * 9/5 + 32),",
				"          lon = 42.3601,",
				"          lat = -71.0589,",
				"          weather_id_value = weather_id,",
				"          weather_main_value = weather_main,",
				"          weather_description_value = weather_description,",
				"          weather_icon_value = weather_icon) ~> derivedColumn4",
				"derivedColumn4 select(mapColumn(",
				"          message,",
				"          cod,",
				"          city_id,",
				"          calctime,",
				"          cnt,",
				"          list,",
				"          timestamp,",
				"          clouds_all,",
				"          feels_like_K = feels_like,",
				"          humidity,",
				"          pressure,",
				"          temp_K = temp,",
				"          temp_max_K = temp_max,",
				"          temp_min_K = temp_min,",
				"          weather_description,",
				"          weather_icon,",
				"          weather_id,",
				"          weather_main,",
				"          wind_deg,",
				"          wind_speed,",
				"          corrected_timestamp,",
				"          location,",
				"          date_time,",
				"          id,",
				"          temp_C,",
				"          temp_min_C,",
				"          temp_max_C,",
				"          feels_like_C,",
				"          feels_like_F,",
				"          temp_min_F,",
				"          temp_max_F,",
				"          lon,",
				"          lat,",
				"          weather_id_value,",
				"          weather_main_value,",
				"          weather_description_value,",
				"          weather_icon_value",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink2"
			]
		}
	}
}